// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkillCraft.Cms.Infrastructure;

#nullable disable

namespace SkillCraft.Cms.Infrastructure.PostgreSQL.Migrations
{
    [DbContext(typeof(RulesContext))]
    [Migration("20251001025138_CreateCustomizationTable")]
    partial class CreateCustomizationTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.AttributeEntity", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttributeId"));

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SlugNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Summary")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("AttributeId");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsPublished");

                    b.HasIndex("Name");

                    b.HasIndex("Slug");

                    b.HasIndex("SlugNormalized")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("Summary");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.HasIndex("Version");

                    b.ToTable("Attributes", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.CustomizationEntity", b =>
                {
                    b.Property<int>("CustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomizationId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SlugNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Summary")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("CustomizationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsPublished");

                    b.HasIndex("Kind");

                    b.HasIndex("Name");

                    b.HasIndex("Slug");

                    b.HasIndex("SlugNormalized")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("Summary");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Customizations", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.FeatureEntity", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("FeatureId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsPublished");

                    b.HasIndex("Name");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Features", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SkillEntity", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillId"));

                    b.Property<int?>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AttributeUid")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SlugNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Summary")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("SkillId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("AttributeUid");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsPublished");

                    b.HasIndex("Name");

                    b.HasIndex("Slug");

                    b.HasIndex("SlugNormalized")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("Summary");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.HasIndex("Version");

                    b.ToTable("Skills", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SpecializationDiscountedTalentEntity", b =>
                {
                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<int>("TalentId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpecializationUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TalentUid")
                        .HasColumnType("uuid");

                    b.HasKey("SpecializationId", "TalentId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("SpecializationUid");

                    b.HasIndex("TalentId");

                    b.HasIndex("TalentUid");

                    b.ToTable("SpecializationDiscountedTalents", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SpecializationEntity", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecializationId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("MandatoryTalentId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MandatoryTalentUid")
                        .HasColumnType("uuid");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherOptions")
                        .HasColumnType("text");

                    b.Property<string>("OtherRequirements")
                        .HasColumnType("text");

                    b.Property<string>("ReservedTalentDescription")
                        .HasColumnType("text");

                    b.Property<string>("ReservedTalentName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SlugNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Summary")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("SpecializationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsPublished");

                    b.HasIndex("MandatoryTalentId");

                    b.HasIndex("MandatoryTalentUid");

                    b.HasIndex("Name");

                    b.HasIndex("ReservedTalentName");

                    b.HasIndex("Slug");

                    b.HasIndex("SlugNormalized")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("Summary");

                    b.HasIndex("Tier");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Specializations", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SpecializationFeatureEntity", b =>
                {
                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FeatureUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationUid")
                        .HasColumnType("uuid");

                    b.HasKey("SpecializationId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("FeatureUid");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("SpecializationUid");

                    b.ToTable("SpecializationFeatures", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SpecializationOptionalTalentEntity", b =>
                {
                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<int>("TalentId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpecializationUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TalentUid")
                        .HasColumnType("uuid");

                    b.HasKey("SpecializationId", "TalentId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("SpecializationUid");

                    b.HasIndex("TalentId");

                    b.HasIndex("TalentUid");

                    b.ToTable("SpecializationOptionalTalents", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.StatisticEntity", b =>
                {
                    b.Property<int>("StatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatisticId"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("AttributeUid")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SlugNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Summary")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("StatisticId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("AttributeUid");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsPublished");

                    b.HasIndex("Name");

                    b.HasIndex("Slug");

                    b.HasIndex("SlugNormalized")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("Summary");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.HasIndex("Version");

                    b.ToTable("Statistics", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.TalentEntity", b =>
                {
                    b.Property<int>("TalentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TalentId"));

                    b.Property<bool>("AllowMultiplePurchases")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("RequiredTalentId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RequiredTalentUid")
                        .HasColumnType("uuid");

                    b.Property<int?>("SkillId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SkillUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SlugNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Summary")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("TalentId");

                    b.HasIndex("AllowMultiplePurchases");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsPublished");

                    b.HasIndex("Name");

                    b.HasIndex("RequiredTalentId");

                    b.HasIndex("RequiredTalentUid");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillUid");

                    b.HasIndex("Slug");

                    b.HasIndex("SlugNormalized")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("Summary");

                    b.HasIndex("Tier");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Talents", "Rules");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SkillEntity", b =>
                {
                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.AttributeEntity", "Attribute")
                        .WithMany("Skills")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SpecializationDiscountedTalentEntity", b =>
                {
                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.SpecializationEntity", "Specialization")
                        .WithMany("DiscountedTalents")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.TalentEntity", "Talent")
                        .WithMany("SpecializationsDiscounted")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Talent");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SpecializationEntity", b =>
                {
                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.TalentEntity", "MandatoryTalent")
                        .WithMany("SpecializationsMandatory")
                        .HasForeignKey("MandatoryTalentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MandatoryTalent");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SpecializationFeatureEntity", b =>
                {
                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.FeatureEntity", "Feature")
                        .WithMany("Specializations")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.SpecializationEntity", "Specialization")
                        .WithMany("Features")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SpecializationOptionalTalentEntity", b =>
                {
                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.SpecializationEntity", "Specialization")
                        .WithMany("OptionalTalents")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.TalentEntity", "Talent")
                        .WithMany("SpecializationsOptional")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Talent");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.StatisticEntity", b =>
                {
                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.AttributeEntity", "Attribute")
                        .WithMany("Statistics")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.TalentEntity", b =>
                {
                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.TalentEntity", "RequiredTalent")
                        .WithMany("RequiringTalents")
                        .HasForeignKey("RequiredTalentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SkillCraft.Cms.Infrastructure.Entities.SkillEntity", "Skill")
                        .WithMany("Talents")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RequiredTalent");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.AttributeEntity", b =>
                {
                    b.Navigation("Skills");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.FeatureEntity", b =>
                {
                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SkillEntity", b =>
                {
                    b.Navigation("Talents");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.SpecializationEntity", b =>
                {
                    b.Navigation("DiscountedTalents");

                    b.Navigation("Features");

                    b.Navigation("OptionalTalents");
                });

            modelBuilder.Entity("SkillCraft.Cms.Infrastructure.Entities.TalentEntity", b =>
                {
                    b.Navigation("RequiringTalents");

                    b.Navigation("SpecializationsDiscounted");

                    b.Navigation("SpecializationsMandatory");

                    b.Navigation("SpecializationsOptional");
                });
#pragma warning restore 612, 618
        }
    }
}
